
This project is slightly different than others you have encountered thus far on Codecademy. Instead of a step-by-step tutorial, this project contains a series of open-ended requirements which describe the project you’ll be building. There are many possible ways to correctly fulfill all of these requirements, and you should expect to use the internet, Codecademy, and other resources when you encounter a problem that you cannot easily solve.

In order to complete this project, you should have completed the Loops and Dictionaries sections of the Learn Python 3 Course. This content is also covered in the Data Scientist Career Path.

Project Goals
You will work to write several functions that organize and manipulate data about Category 5 Hurricanes, the strongest hurricanes as rated by their wind speed. Each one of these functions will use a number of parameters, conditionals, lists, dictionaries, string manipulation, and return statements.

Setup Instructions
You have two options of completing this assignment. Either here, within Codecademy’s output terminal, or on your own, in case you’re more comfortable using a Jupyter notebook.If you choose to do this project on your computer instead of Codecademy, you can download what you’ll need by clicking the “Download” button below. If you need help setting up your computer, be sure to check out our setup guides:

Command Line Interface Setup
Introducing Jupyter Notebook
Setting up Jupyter Notebook
Getting Started with Jupyter
Getting More out of Jupyter Notebook
Open Hurricane Analysis.ipynb and follow the steps in the Jupyter Notebook. If you get stuck, you can look at Hurricane Analysis_Solution.ipynb for the answer.

Download
Tasks
10/10 complete
Mark the tasks as complete by checking them off
Project Requirements
1.
Hurricanes, also known as cyclones or typhoons, are one of the most powerful forces of nature on Earth. Due to climate change caused by human activity, the number and intensity of hurricanes has risen, calling for better preparation by the many communities that are devastated by them. As a concerned environmentalist, you want to look at data about the most powerful hurricanes that have occurred.

Begin by looking at the damages list. The list contains strings representing the total cost in USD($) caused by 34 category 5 hurricanes (wind speeds ≥ 157 mph (252 km/h )) in the Atlantic region. For some of the hurricanes, damage data was not recorded ("Damages not recorded"), while the rest are written in the format "Prefix-B/M", where B stands for billions (1000000000) and M stands for millions (1000000).

Write a function that returns a new list of updated damages where the recorded data is converted to float values and the missing data is retained as "Damages not recorded".

Test your function with the data stored in damages.

2.
Additional data collected on the 34 strongest Atlantic hurricanes are provided in a series of lists. The data includes:

names: names of the hurricanes
months: months in which the hurricanes occurred
years: years in which the hurricanes occurred
max_sustained_winds: maximum sustained winds (miles per hour) of the hurricanes
areas_affected: list of different areas affected by each of the hurricanes
deaths: total number of deaths caused by each of the hurricanes
The data is organized such that the data at each index, from 0 to 33, corresponds to the same hurricane.

For example, names[0] yields the “Cuba I” hurricane, which ouccred in months[0] (October) years[0] (1924).

Write a function that constructs a dictionary made out of the lists, where the keys of the dictionary are the names of the hurricanes, and the values are dictionaries themselves containing a key for each piece of data (Name, Month, Year,Max Sustained Wind, Areas Affected, Damage, Death) about the hurricane.

Thus the key "Cuba I" would have the value: {'Name': 'Cuba I', 'Month': 'October', 'Year': 1924, 'Max Sustained Wind': 165, 'Areas Affected': ['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], 'Damage': 'Damages not recorded', 'Deaths': 90}.

Test your function on the lists of data provided.

3.
In addition to organizing the hurricanes in a dictionary with names as the key, you want to be able to organize the hurricanes by year.

Write a function that converts the current dictionary of hurricanes to a new dictionary, where the keys are years and the values are lists containing a dictionary for each hurricane that occurred in that year.

For example, the key 1932 would yield the value: [{'Name': 'Bahamas', 'Month': 'September', 'Year': 1932, 'Max Sustained Wind': 160, 'Areas Affected': ['The Bahamas', 'Northeastern United States'], 'Damage': 'Damages not recorded', 'Deaths': 16}, {'Name': 'Cuba II', 'Month': 'November', 'Year': 1932, 'Max Sustained Wind': 175, 'Areas Affected': ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], 'Damage': 40000000.0, 'Deaths': 3103}].

Test your function on your hurricane dictionary.

4.
You believe that knowing how often each of the areas of the Atlantic are affected by these strong hurricanes is important for making preparations for future hurricanes.

Write a function that counts how often each area is listed as an affected area of a hurricane. Store and return the results in a dictionary where the keys are the affected areas and the values are counts of how many times the areas were affected.

Test your function on your hurricane dictionary.

5.
Write a function that finds the area affected by the most hurricanes, and how often it was hit.

Test your function on your affected area dictionary.

6.
Write a function that finds the hurricane that caused the greatest number of deaths, and how many deaths it caused.

Test your function on your hurricane dictionary.

7.
Just as hurricanes are rated by their windspeed, you want to try rating hurricanes based on other metrics.

Write a function that rates hurricanes on a mortality scale according to the following ratings, where the key is the rating and the value is the upper bound of deaths for that rating.

mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}

 

For example, a hurricane with a 1 mortality rating would have resulted in greater than 0 but less than or equal to 100 deaths. A hurricane with a 5 mortality rating would have resulted in greater than 10000 deaths.

Store the hurricanes in a new dictionary where the keys are mortality ratings and the values are lists containing a dictionary for each hurricane that falls into that mortality rating.

Test your function on your hurricane dictionary.

8.
Write a function that finds the hurricane that caused the greatest damage, and how costly it was.

Test your function on your hurricane dictionary.

9.
Lastly, you want to rate hurricanes according to how much damage they cause.

Write a function that rates hurricanes on a damage scale according to the following ratings, where the key is the rating and the value is the upper bound of damage for that rating.

damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}

 

For example, a hurricane with a 1 damage rating would have resulted in damages greater than 0 USD but less than or equal to 100000000 USD. A hurricane with a 5 damage rating would have resulted in damages greater than 50000000000 USD (talk about a lot of money).

Store the hurricanes in a new dictionary where the keys are damage ratings and the values are lists containing a dictionary for each hurricane that falls into that damage rating.

Test your function on your hurricane dictionary.

Solution
10.
Great work! Visit our forums to compare your project to our sample solution code. You can also learn how to host your own solution on GitHub so you can share it with other learners! Your solution might look different from ours, and that’s okay! There are multiple ways to solve these projects, and you’ll learn more by seeing others’ code.


# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}
def float_damages(damages, conversion):
    result = []
    for d in damages:
      #remove all the space in the values
        d = str(d).strip()
        # missing / not recorded -> "Damages not recorded" 
        if not d or 'not recorded' in d.lower():
          #add it to the result
            result.append("Damages not recorded")
            continue
        # look at the last item in the value
        #and make it uppercasem just in case its lower by accident
        last = d[-1].upper()         
         # possible suffix (M/B) inside the conversion dict
        if last in conversion:
          #get all the rest of the values other than the letter
            number_part = d[:-1]    
             # everything except the suffix
             #the value equals 
             #we use float because there are some that are not whole numbers
             #if we used int there would be errors.
            value = float(number_part) * conversion[last]
        else:
            value = float(d)        
             # plain number
        #then we add it to the result list
        result.append(float(value))  
        # append in both cases

    return result




# test function by updating damages
updated_damages = float_damages(damages, conversion)
#print(updated_damages)

# 2 
# Create a Table

def compile_data_by_name(names,months,years,max_sustained_winds,areas_affected,updated_damages,deaths,):
    #guard against mismatched list lengths is any are the wrong length will throw an error
    lengths = list(map(len, [
        names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths
    ]))
    if len(set(lengths)) != 1:
        raise ValueError(f"All input lists must have the same length. Got lengths: {lengths}")

    return {
        name: {
            "Month": month,
            "Year": year,
            "Max Sustained Wind": max_wind,
            "Areas Affected": areas,
            "Damage": damage,
            "Deaths": death,
        }
        for name, month, year, max_wind, areas, damage, death in zip(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths)}


# Create and view the hurricanes dictionary
combined_data=compile_data_by_name(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths)
print(combined_data)
# 3
# Organizing by Year
def group_by_year(data_by_name):
  
    #Convert {Name -> info dict} into {Year -> [info dicts with Name included]}.
    #- Keeps 'Year' inside each record.
    #- Adds 'Name' into each record.
    by_year = {}
    #first it looks at the key and the values of each based on the dictionary passed into it.using items() keeps the information together.
    #info is the inner dict for one storm (e.g., {"Month": "August", "Year": 2005, ...}) that came from your data_by_name.
    for name, info in data_by_name.items():
        year = info.get("Year")
        if year is None:
            # skip or handle however you like; here we skip rows with missing year
            continue

        # Make a record that includes the name and all the existing fields (including Year)
        #info.copy() makes a shallow copy so we don’t change the original info inside data_by_name. (If we wrote directly into info, we’d be mutating your source dict.)
        #record["Name"] = name adds the storm’s name as a field inside the copied dict (e.g., now it’s {"Month": "August", "Year": 2005, ..., "Name": "Katrina"}).
        record = info.copy()
        record["Name"] = name

        # Put the record under its year
        by_year.setdefault(year, []).append(record)
#by_year is the dict we’re building, where each key is a year and each value is a list of storm records for that year.
#setdefault(year, []) says:
#If year is already a key, give me its existing list.
#If it isn’t a key yet, create it with an empty list [] and give me that.
#.append(record) adds this storm’s record to the list for that year.
    return by_year

# create a new dictionary of hurricanes with year and key
year_data=group_by_year(combined_data)
print(year_data)
# 4
# Counting Damaged Areas
def create_damaged_areas(areas_affected):
    counts = {}
     # each storm's list
    for storm_areas in areas_affected: 
      # each location in that storm    
        for area in storm_areas:     
          #right side looks in counts dict for the area value, and adds one to it.      
          #left side looks for the key with the name of the area, if it finds one it puts the number on the right. if it doesnt then it makes one and the right uses the default of 0
            counts[area] = counts.get(area, 0) + 1
    return counts



# create dictionary of areas to store the number of hurricanes involved in
area=create_damaged_areas(areas_affected)
print(area)

# 5 
# Calculating Maximum Hurricane Count
#def most_affected_area_loop(counts):
    #best_area = None
    #best_count = -1
    #for area, count in counts.items():
     #   if count > best_count:
      #      best_area = area
       #     best_count = count
  #  return best_area, best_count

# find most frequently affected area and the number of hurricanes involved in
#most_affected_area=most_affected_area_loop(area)
def most_affected_area(counts):
    if not counts:
        return None, 0  # or raise ValueError("Empty counts dict")
    area, count = max(counts.items(), key=lambda kv: kv[1])
    return area, count
area_most=most_affected_area(area)
print(*area_most)
# 6
# Calculating the Deadliest Hurricane
deadly_dict = dict(zip(names, deaths))  # names -> death counts

def most(counts):
    if not counts:
        return None, 0

    def is_number(x):
        # numeric, not bool, and not NaN (x != x is True only for NaN)
        return (
            isinstance(x, (int, float))
            and not isinstance(x, bool)
            and not (isinstance(x, float) and x != x)
        )

    # pick the (name, count) pair with the largest count
    name, deaths_count = max(
        ((k, v) for k, v in counts.items() if is_number(v)),
        key=lambda kv: kv[1],
        default=(None, 0),
    )
    return name, deaths_count


death_most = most(deadly_dict)

print(*death_most)         


# 7
# Rating Hurricanes by Mortality
#deadly_dict
mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}
def apply_scale(values_by_name, scale):
    # sort levels by threshold ascending
    #scale.items() gives pairs like (level, threshold). Sorting by the threshold (the value in each pair) guarantees we test from smallest to largest.
    levels = sorted(scale.items(), key=lambda kv: kv[1])
    
    out = {}
    for name, value in values_by_name.items():
        # Converts strings like "1836" into numbers if needed, so comparisons work.
        # NEW: if value isn't numeric (e.g., "Damages not recorded" or "100M"), keep it unchanged
        try:
            v = float(str(value).strip())
        except (TypeError, ValueError):
            out[name] = value
            continue

        # default to the lowest level
        level_for_v = levels[0][0]  
       # We move from the smallest threshold upwards.Every time v is ≥ threshold, we upgrade the level.The first time v < threshold, we break (stop), because higher thresholds won’t match either.Result: we end with the highest level that v qualifies for.
        for lvl, thresh in levels:
            if v >= thresh:
                level_for_v = lvl
            else:
                break
        out[name] = level_for_v
    return out

mortality=apply_scale(deadly_dict,mortality_scale)
print(mortality)

#Lower-bound thresholds are intuitive (“level 3 means at least 500 deaths”).Sorting lets us short-circuit with break for speed and clarity.Works for any scale—mortality, damage, wind, etc.—as long as you provide {level: threshold}.


# 8 Calculating Hurricane Maximum Damage
damage_dict = dict(zip(names, updated_damages)) 
damage_most = most(damage_dict)
print(*damage_most)
# find highest damage inducing hurricane and its total cost


# 9
# Rating Hurricanes by Damage
 
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
damage_scale_results=apply_scale(damage_dict,damage_scale)
print(damage_scale_results)

