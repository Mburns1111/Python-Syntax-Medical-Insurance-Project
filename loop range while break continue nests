#Let’s link these concepts back to our ingredients example. This for loop prints each ingredient in ingredients:
#ingredients = ["milk", "sugar", "vanilla extract", "dough", "chocolate"]

#for ingredient in ingredients:
  #print(ingredient)
#In this example:
#for <temporary variable> in <collection>:
 # <action>

#ingredient is the <temporary variable>.
#ingredients is our <collection>.
#print(ingredient) was the <action> performed on every iteration using the temporary variable of ingredient.
#This code outputs:
#milk
#sugar
#vanilla extract
#dough
#chocolate
#A temporary variable’s name is arbitrary and does not need to be defined beforehand. Both of the following code snippets do the exact same thing as our above example:
#for i in ingredients:
  # print(i)
#for item in ingredients:
  #print(item)


board_games = ["Settlers of Catan", "Carcassone", "Power Grid", "Agricola", "Scrabble"]

sport_games = ["football", "hockey", "baseball", "cricket"]

for game in board_games:
  print(game)

for game in sport_games:
  print(game)

#For example, if we wanted to print out a "Learning Loops!" message six times using a for loop, we would follow this structure:

#for <temporary variable> in <list of length 6>:
  #print("Learning Loops!")
#Notice that we need to iterate through a list with a length of six, but we don’t necessarily care what is inside of the list.
#An example of how the range() function works, this code generates a collection of 6 integer elements from 0 to 5:
#six_steps = range(6)

# six_steps is now a collection with 6 elements:
# 0, 1, 2, 3, 4, 5
#for temp in range(6):
#  print("Learning Loops!")
#Learning Loops!
#Learning Loops!
#Learning Loops!
#Learning Loops!
#Learning Loops!
#Learning Loops!
#for temp in range(6):
#  print("Loop is on iteration number " + str(temp + 1))
#Loop is on iteration number 1
#Loop is on iteration number 2
#Loop is on iteration number 3
#Loop is on iteration number 4
#Loop is on iteration number 5
#Loop is on iteration number 6



#Use the range() function in a for loop to print() out the provided promise variable five times.
promise = "I will finish the python loops module!"
for temp in range(5):
  print(promise)

#A while loop performs a set of instructions as #long as a given condition is true.

#The structure follows this pattern:
#while <conditional statement>:
#  <action>
#count = 0
#count is initially defined with the value of 0. The conditional statement in the while loop is count <= 3, which is true at the initial iteration of the loop, so the loop body executes.
#while count <= 3:
   # Loop Body
   #print(count)
   #count += 1
   # Any other code at this level of indentation will
   # run on each iteration
#Similar to for loops, Python allows us to write elegant one-line while loops. Here is our previous example in a single line:
#count = 0
#while count <= 3: print(count); count += 1




# While Loop Walkthrough
count = 0
print("Starting While Loop")
while count <= 3:
  # Loop Body
  # Print if the condition is still true
  print("Loop Iteration - count <= 3 is still true")
  # Print the current value of count 
  print("Count is currently " + str(count))
  # Increment count
  count += 1
  print(" ----- ")
print("While Loop ended")

# Your code below: 
#We should print() the value of the countdown variable.
#We should decrease the value of the countdown variable by 1
countdown =10
while countdown >=0 : 
  print(countdown)
  countdown -= 1

print("We have liftoff!")

#ingredients = ["milk", "sugar", "vanilla extract", "dough", "chocolate"]
# Length would be equal to 5
#length = len(ingredients)
#We can then use this length in addition to another variable to construct the while loop:
#length = len(ingredients)
#index = 0

#while index < length:
 # print(ingredients[index])
 # index += 1
# Increment index to access the next element in ingredients
# Each iteration gets closer to making the conditional no longer true
#index += 1

python_topics = ["variables", "control flow", "loops", "modules", "classes"]

#Your code below: 
length = len(python_topics)
#Create a variable called index and initialize the value to be 0.
index =0
while index < length:
  print("I am learning about "+python_topics[index])
  index += 1

#Every time we enter the loop, we add a 1 to the end of the list that we are iterating through. As a result, we never make it to the end of the list. It keeps growing forever!
#my_favorite_numbers = [4, 8, 15, 16, 42]

#for number in my_favorite_numbers:
  #my_favorite_numbers.append(1)



students_period_A = ["Alex", "Briana", "Cheri", "Daniele"]
students_period_B = ["Dora", "Minerva", "Alexa", "Obie"]

for student in students_period_A:
  print(student)

#items_on_sale = ["blue shirt", "striped socks", "knit dress", "red headband", "dinosaur onesie"]
# if we want to search for the value of "knit dress" and print out "Found it" if it did exist?
#for item in items_on_sale:
  #if item == "knit dress":
    #print("Found it")
#When the program hits a break statement it immediately terminates a loop. For example:
#items_on_sale = ["blue shirt", "striped socks", "knit dress", "red headband", "dinosaur onesie"]

#print("Checking the sale list!")

#for item in items_on_sale:
  #print(item)
  #if item == "knit dress":
    #break

#print("End of search!")
#Checking the sale list!
#blue shirt
#striped socks
#knit dress
#End of search!

dog_breeds_available_for_adoption = ["french_bulldog", "dalmatian", "shihtzu", "poodle", "collie"]
dog_breed_I_want = "dalmatian"

#You have a list of dog breeds you can adopt, dog_breeds_available_for_adoption.

#Using a for loop, iterate through the dog_breeds_available_for_adoption list and print() out each dog breed.

#Use the <temporary variable> name of dog_breed in your loop declaration.
for dog_breed in dog_breeds_available_for_adoption :
  print(dog_breed)
  #Inside your for loop, after you print each dog breed, check if the current element inside dog_breed is equal to dog_breed_I_want. If so, print "They have the dog I want!"
  if dog_breed == dog_breed_I_want: print("They have the dog I want!") ; break

#Add a break statement when your loop has found dog_breed_I_want so that the rest of the list does not need to be checked once we have found our breed.

#While the 
#break
#Preview: Docs Loading link description
 #control statement will come in handy, there are other situations where we don’t want to end the loop entirely. What if we only want to skip the current iteration of the loop?

#Let’s take this list of integers as our example:
#big_number_list = [1, 2, -1, 4, -5, 5, 2, -9]
#What if we want to print out all of the numbers in a list, but only if they are positive integers. We can use another common loop control statement called 
#continue
#for i in big_number_list:
 # if i <= 0:
 #   continue
#  print(i)
#1
#2
#4
#5
#2
#Similar to when we were using the break control statement, our continue control statement is usually paired with some form of a conditional (if/elif/else).
#When our loop first encountered an element (-1) that met the conditions of the if statement, it checked the code inside the block and saw the continue. When the loop then encounters a continue statement it immediately skips the current iteration and moves onto the next element in the list (4).
#The output of the list only printed positive integers in the list because every time our loop entered the if statement and saw the continue statement it simply moved to the next iteration of the list and thus never reached the print statement.



ages = [12, 38, 34, 26, 21, 19, 67, 41, 17]
for age in ages:
  if age < 21:
    continue
  print(age)


#Loops can be nested in Python, as they can with other programming languages. We will find certain situations that require nested loops.

#Suppose we are in charge of a science class, that is split into three project teams:

#project_teams = [["Ava", "Samantha", "James"], ["Lucille", "Zed"], ["Edgar", "Gabriel"]]

#Using a for or while loop can be useful here to get each team:

#for team in project_teams:
  #print(team)
#["Ava", "Samantha", "James"]
#["Lucille", "Zed"]
#["Edgar", "Gabriel"]
#But what if we wanted to print each individual student? In this case, we would actually need to nest our loops to be able to loop through each sub-list. Here is what it would look like:

# Loop through each sublist
#for team in project_teams:
  # Loop elements in each sublist
  #for student in team:
   # print(student)
#Ava
#Samantha
#James
#Lucille
#Zed
#Edgar
#Gabriel

sales_data = [[12, 17, 22], [2, 10, 3], [5, 12, 13]]
scoops_sold =0
#For our temporary variable of the for loop, call it location.
#print() out each location list.
for location in sales_data:
  print(location)
  for sold in location:
     scoops_sold += sold
print(scoops_sold)
#Within our sales_data loop, nest a secondary loop to go through each location sublist element and add the element value to scoops_sold.

#using list comprehensions.

#To start, let’s say we had a list of integers and wanted to create a list where each element is doubled. We could accomplish this using a for loop and a new list called doubled:

#numbers = [2, -1, 79, 33, -45]
#doubled = []

#for number in numbers:
  #doubled.append(number * 2)

#print(doubled)
#[4, -2, 158, 66, -90]

#Let’s see how we can use the power of list comprehensions to solve these types of problems in one line. Here is our same problem but now written as a list comprehension:

#numbers = [2, -1, 79, 33, -45]
#doubled = [num * 2 for num in numbers]
#print(doubled)
#Let’s break down our example in a more general way:

#new_list = [<expression> for <element> in <collection>]
#In our doubled example, our list comprehension:

#Takes an element in the list numbers
#Assigns that element to a variable called num (our <element>)
#Applies the <expression> on the element stored in num and adds the result to a new list called doubled
#Repeats steps 1-3 for every other element in the numbers list (our <collection>)
#Our result would be the same:

#[4, -2, 158, 66, -90]




grades = [90, 88, 62, 76, 74, 89, 48, 57]

scaled_grades = [num + 10 for num in grades]
print(scaled_grades)
#numbers = [2, -1, 79, 33, -45]

#no_if   = [num * 2 for num in numbers]
#if_only = [num * 2 for num in numbers if num < 0]
#if_else = [num * 2 if num < 0 else num * 3 for num in numbers]


heights = [161, 164, 156, 144, 158, 170, 163, 163, 157]
can_ride_coaster = [num for num in heights if num > 161 ]
print(can_ride_coaster)
