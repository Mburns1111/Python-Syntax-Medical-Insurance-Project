.lower() returns the string with all lowercase characters.
.upper() returns the string with all uppercase characters.
.title() returns the string in title case, which means the first letter of each word is capitalized.

poem_title = "spring storm"
poem_author = "William Carlos Williams"

poem_title_fixed= poem_title.title()
print(poem_title, poem_title_fixed)
poem_author_fixed= poem_author.upper()
print(poem_author, poem_author_fixed)

.split()
Preview: Docs Breaks down a string into a list of substrings based on a specified separator.
 is performed on a string, takes one argument, and returns a list of 
substrings
Preview: Docs Loading link description
 found between the given argument (which in the case of .split() is known as the delimiter). 

line_one = "The sky has given over"

line_one_words = line_one.split()
print(line_one, line_one_words)

If we provide an argument for 
.split()
Preview: Docs Loading link description
 we can dictate the character we want our string to be split on. This argument should be provided as a string itself.

Consider the following example:

greatest_guitarist = "santana"
print(greatest_guitarist.split('n'))
# => ['sa', 'ta', 'a']

 

We provided 'n' as the argument for .split() so our string “santana” got split at each 'n' character into a list of three strings.

What do you think happens if we split the same string at 'a'?

print(greatest_guitarist.split('a'))
# => ['s', 'nt', 'n', '']

authors = "Audre Lorde,Gabriela Mistral,Jean Toomer,An Qi,Walt Whitman,Shel Silverstein,Carmen Boullosa,Kamala Suraiyya,Langston Hughes,Adrienne Rich,Nikki Giovanni"

# Split the long string into a list of full names using commas as separators
author_names = authors.split(',')
print(author_names)
#Create another list called author_last_names that only contains the last names of the poets in the provided string.
def last_names(author_names):
  # Create an empty list to store last names
  last_names = []
  # Loop through each full name in the list
  for name in author_names:
    # Split the full name into parts using space as the separator
    split_name = name.split(" ")
    # Get the last part (the last name) and add it to the list
    last_names.append(split_name[-1])
  # Return the list of last names
  return last_names

# Call the function and store the result in author_last_names
author_last_names = last_names(author_names)
print(author_last_names)


We can also split 
strings
Preview: Docs A string is a sequence of characters contained within a pair of single quotes or double quotes.
 using escape sequences. Escape sequences are used to indicate that we want to split by something in a string that is not necessarily a character. The two escape sequences we will cover here are

\n Newline
\t Horizontal Tab
Newline or \n will allow us to split a multi-line string by line breaks and \t will allow us to split a string by tabs. \t is particularly useful when dealing with certain datasets because it is not uncommon for data points to be separated by tabs.

Let’s take a look at an example of splitting by an escape sequence:

smooth_chorus = \
"""And if you said, "This life ain't good enough."
I would give my world to lift you up
I could change my life to better suit your mood
Because you're so smooth"""
chorus_lines = smooth_chorus.split('\n')

print(chorus_lines)
 This code is splitting the multi-line string at the newlines (\n) which exist at the end of each line and saving it to a new list called chorus_lines. Then it prints chorus_lines which will produce the output:

['And if you said, "This life ain\'t good enough."', 'I would give my world to lift you up', 'I could change my life to better suit your mood', "Because you're so smooth"]

 
The new list contains each line of the original string as its own smaller string. Also, notice that Python automatically escaped the ' character in the first line and adjusted to double quotation marks to allow the apostrophe on last line when it created the new list.

Notice that there is an unexpected extra '' string in this list. When you split a string on a character that it also ends with, you’ll end up with an empty string at the end of the list.

You can use any string as the argument for .split(), making it a versatile and powerful tool.

spring_storm_text = \
"""The sky has given over 
its bitterness. 
Out of the dark change 
all day long 
rain falls and falls 
as if it would never end. 
Still the snow keeps 
its hold on the ground. 
But water, water 
from a thousand runnels! 
It collects swiftly, 
dappled with black 
cuts a way for itself 
through green ice in the gutters. 
Drop after drop it falls 
from the withered grass-stems 
of the overhanging embankment."""

spring_storm_lines = spring_storm_text.split('\n')
print(spring_storm_lines)

Now that you’ve learned to 
break
Preview: Docs Loading link description
 strings apart using 
.split()
Preview: Docs Breaks down a string into a list of substrings based on a specified separator.
, let’s learn to put them back together using .join(). .join() is essentially the opposite of .split(), it joins a list of strings together with a given delimiter. The syntax of .join() is:

'delimiter'.join(list_you_want_to_join)

 
Now this may seem a little weird, because with .split() the argument was the delimiter, but now the argument is the list. This is because join is still a string method, which means it has to act on a string. The string .join() acts on is the delimiter you want to join with, therefore the list you want to join has to be the argument.

This can be a bit confusing, so let’s take a look at an example.

my_munequita = ['My', 'Spanish', 'Harlem', 'Mona', 'Lisa']
print(' '.join(my_munequita))
# => 'My Spanish Harlem Mona Lisa'

 
We take the list of strings, my_munequita, and we joined it together with our delimiter, ' ', which is a space. The space is important if you are trying to build a sentence from words, otherwise, we would have ended up with:

print(''.join(my_munequita))
# => 'MySpanishHarlemMonaLisa'

Use .join() to combine these words into a sentence and save that sentence as the string reapers_line_one.

reapers_line_one_words = ["Black", "reapers", "with", "the", "sound", "of", "steel", "on", "stones"]

reapers_line_one= ' '.join(reapers_line_one_words)

print(reapers_line_one)

In the last exercise, we joined together a list of words using a space as the delimiter to create a sentence. In fact, you can use any string as a delimiter to join together a list of 
strings
Preview: Docs A string is a sequence of characters contained within a pair of single quotes or double quotes.
. For example, if we have the list

santana_songs = ['Oye Como Va', 'Smooth', 'Black Magic Woman', 'Samba Pa Ti', 'Maria Maria']

 
We could join this list together with ANY string. One often used string is a comma , because then we can create a string of comma-separated values, or CSV.

santana_songs_csv = ','.join(santana_songs)
print(santana_songs_csv)
# => 'Oye Como Va,Smooth,Black Magic Woman,Samba Pa Ti,Maria Maria'

 
You’ll often find data stored in CSVs because it is an efficient, simple file type used by popular programs like Excel or Google Spreadsheets.

You can also join using escape sequences as the delimiter. Consider the following example:

smooth_fifth_verse_lines = ['Well I\'m from the barrio', 'You hear my rhythm on your radio', 'You feel the turning of the world so soft and slow', 'Turning you \'round and \'round']

smooth_fifth_verse = '\n'.join(smooth_fifth_verse_lines)

print(smooth_fifth_verse)

 
This code is taking the list of strings and joining them using a newline \n as the delimiter. Then it prints the result and produces the output:

Well I'm from the barrio
You hear my rhythm on your radio
You feel the turning of the world so soft and slow
Turning you 'round and 'round
winter_trees_lines = ['All the complicated details', 'of the attiring and', 'the disattiring are completed!', 'A liquid moon', 'moves gently among', 'the long branches.', 'Thus having prepared their buds', 'against a sure winter', 'the wise trees', 'stand sleeping in the cold.']

winter_trees_full = '\n'.join(winter_trees_lines)
print(winter_trees_full)

Python provides a great method for cleaniYou can also use .strip() with a character argument, which will strip that character from either end of the string.

featuring = "!!!rob thomas       !!!!!"
print(featuring.strip('!'))
# => 'rob thomas       '

 
By including the argument '!' we are able to strip all of the ! characters from either side of the string. Notice that now that we’ve included an argument we are no longer stripping whitespace, we are ONLY stripping the argument.ng strings: 
.strip()
Preview: Docs Removes leading and trailing whitespace or specified characters from a string
. Stripping a string removes all whitespace characters from the beginning and end. Consider the following example:

featuring = "           rob thomas                 "
print(featuring.strip())
# => 'rob thomas'

love_maybe_lines = ['Always    ', '     in the middle of our bloodiest battles  ', 'you lay down your arms', '           like flowering mines    ','\n' ,'   to conquer me home.    ']
#love_maybe_lines, which is a list. The .strip() method is only available for strings, not lists. To fix this, you should use a list comprehension to apply .strip() to each string inside the list.
love_maybe_lines_stripped = [line.strip() for line in love_maybe_lines]
#.join() the lines in love_maybe_lines_stripped together into one large multi-line string, love_maybe_full, that can be printed to display the poem.

#Each line of the poem should show up on its own line.
#remember the delimeter goes first, then the join and then the argument you are joining last in the ()
love_maybe_full= "\n".join(love_maybe_lines_stripped)
print(love_maybe_full)

The next string method we will cover is 
.replace()
Preview: Docs Replaces a given substring with another substring in a string.
. Replace takes two arguments and replaces all instances of the first argument in a string with the second argument. 

toomer_bio = \
"""
Nathan Pinchback Tomer, who adopted the name Jean Tomer early in his literary career, was born in Washington, D.C. in 1894. Jean is the son of Nathan Tomer was a mixed-race freedman, born into slavery in 1839 in Chatham County, North Carolina. Jean Tomer is most well known for his first book Cane, which vividly portrays the life of African-Americans in southern farmlands.
"""
toomer_bio_fixed=toomer_bio.replace("Tomer","Toomer")


Another interesting string method is 
.find()
Preview: Docs Returns the index of the first occurrence of a substring within a string.
. .find() takes a string as an argument and searching the string it was run on for that string. It then returns the first index value where that string is located.

god_wills_it_line_one = "The very earth will disown you"

disown_placement= god_wills_it_line_one.find("disown")


Python also provides a handy string method for including 
variables
Preview: Docs Variables are used to store data that can be used and manipulated throughout a program.
 in 
strings
Preview: Docs A string is a sequence of characters contained within a pair of single quotes or double quotes.
. This method is .format(). .format() takes variables as an argument and includes them in the string that it is run on. You include {} marks as placeholders for where those variables will be imported.

Consider the following function:

def favorite_song_statement(song, artist):
  return "My favorite song is {} by {}.".format(song, artist)

 
The function favorite_song_statement takes two arguments, song and artist, then returns a string that includes both of the arguments and prints a sentence. Note: .format() can take as many arguments as there are {} in the string it is run on, which in this case is two.

Here’s an example of the function being run:

print(favorite_song_statement("Smooth", "Santana"))
# => "My favorite song is Smooth by Santana."

def poem_title_card(title,poet):
  return(" The poem {} is written by {}").format(title,poet)

print(poem_title_card("I Hear America Singing", "Walt Whitman"))


.format() can be made even more legible for other people reading your code by including 
keywords
Preview: Docs Python keywords are reserved for specific purposes and not available for assignment.
. Previously, with .format(), you had to make sure that your 
variables
Preview: Docs Variables are used to store data that can be used and manipulated throughout a program.
 appeared as arguments in the same order that you wanted them to appear in the string, which added unnecessary complications when writing code.

By including keywords in the string, and in the arguments, you can remove that ambiguity. Let’s look at an example.

def favorite_song_statement(song, artist):
  return "My favorite song is {song} by {artist}.".format(song=song, artist=artist)

 
Now it is clear to anyone reading the string what it is supposed to 
return
Preview: Docs Loading link description
, they don’t even need to look at the arguments of .format() in order to get a clear understanding of what is supposed to happen. You can even reverse the order of artist and song in the code above and it will work the same way.

For example, if the arguments of .format() are in a different order, the code will still work since the keywords are present:

def favorite_song_statement(song, artist):
  # this will have the same output as the above example
  return "My favorite song is {song} by {artist}.".format(artist=artist, song=song)

 
This makes writing AND reading the code much easier.

def poem_description(publishing_date, author, title, original_work):
  poem_desc = "The poem {title} by {author} was originally published in {original_work} in {publishing_date}.".format(publishing_date=publishing_date, author=author, title=title, original_work=original_work)
  return poem_desc

author = "Shel Silverstein"
title = "My Beard"
original_work = "Where the Sidewalk Ends"
publishing_date = "1974"

my_beard_description = poem_description(publishing_date, author, title, original_work)
print(my_beard_description)



