Now that we are iterating through 
strings
Preview: Docs A string is a sequence of characters contained within a pair of single quotes or double quotes.
, we can really explore the potential of strings. When we iterate through a string we do something with each character. By including conditional statements inside of these iterations, we can start to do some really cool stuff.

Take a look at the following code:

favorite_fruit = "blueberry"
counter = 0
for character in favorite_fruit:
  if character == "b":
    counter = counter + 1
print(counter)

Copy to Clipboard

This code will count the number of bs in the string “blueberry” (hint: it’s two). Let’s take a moment and 
break
Preview: Docs Loading link description
 down what exactly this code is doing.

First, we define our string, favorite_fruit, and a variable called counter, which we set equal to zero. Then the for loop will iterate through each character in favorite_fruit and compare it to the letter b.

Each time a character equals b the code will increase the variable counter by one. Then, once all characters have been checked, the code will print the counter, telling us how many bs were in “blueberry”. This is a great example of how iterating through a string can be used to solve a specific application, in this case counting a certain letter in a word.

Instructions
Checkpoint 1 Passed
1.
Write a function called letter_check that takes two inputs, word and letter.


def letter_check(word,letter):
  for each_letter in word:
    if letter == each_letter:
       return True
    return False

#if you put else return False, then the first time it doesnt find the letter it will return false
This function should return True if the word contains the letter and False if it does not.

Data and Programming Foundations for AI Skill Path

Ask the AI Learning Assistant
Get Unstuck
Tools

Avatar
Introduction to Strings: Strings and Conditionals (Part Two)
Narrative and Instructions
Learn
Introduction to Strings
Strings and Conditionals (Part Two)
16 min
There’s an even easier way than iterating through the entire string to determine if a character is in a string. We can do this type of check more efficiently using in. in checks if one string is part of another string.

Here is what the syntax of in looks like:

letter in word

Copy to Clipboard

Here, letter in word is a boolean expression that is True if the string letter is in the string word. Here are some examples:

print("e" in "blueberry")
# => True
print("a" in "blueberry")
# => False

Copy to Clipboard

In fact, this method is more powerful than the function you wrote in the last exercise because it not only works with letters, but with entire 
strings
Preview: Docs A string is a sequence of characters contained within a pair of single quotes or double quotes.
 as well.

print("blue" in "blueberry")
# => True
print("blue" in "strawberry")
# => False

Copy to Clipboard

It can be helpful to include more than one boolean expression in the same line of code. To do this, use and or and not in between the boolean expressions.

print("e" in "blueberry" and "e" in "carrot")
# => False
print("e" in "blueberry" and not "e" in "carrot")
# => True

Copy to Clipboard

The first example above is False because ONE of the expressions was False; there is no “e” in “carrot”. The second example is True because there is an “e” in “blueberry” and not an “e” in “carrot”; both expressions are True.

Instructions
Checkpoint 1 Passed
1.
Write a function called contains that takes two arguments, big_string and little_string and returns True if big_string contains little_string.

For example contains("watermelon", "melon") should return True and contains("watermelon", "berry") should return False.

Checkpoint 2 Passed
2.
Write a function called common_letters that takes two arguments, string_one and string_two and then returns a list with all of the letters they have in common.

The letters in the returned list should be unique. For example,

common_letters("banana", "cream")

Copy to Clipboard

should return ['a'].
def contains(big_string,little_string):
  if little_string in big_string: return True
  return False

def common_letters(string_one,string_two):
  letter=[]
  for character in string_one:
    if character in string_two and character not in letter:
      letter.append(character) 
  return letter
